
廖雪峰的官方网站
编程
读书
数字货币

Java教程

JavaScript教程
Python教程
Git教程
问答
赞助
 登录
目录
Python教程
Python简介
安装Python
Python解释器
第一个Python程序
使用文本编辑器
Python代码运行助手
输入和输出
Python基础
数据类型和变量
字符串和编码
使用list和tuple
条件判断
循环
使用dict和set
函数
调用函数
定义函数
函数的参数
递归函数
高级特性
切片
迭代
列表生成式
生成器
迭代器
函数式编程
高阶函数
map/reduce
filter
sorted
返回函数
匿名函数
装饰器
偏函数
模块
使用模块
安装第三方模块
面向对象编程
类和实例
访问限制
继承和多态
获取对象信息
实例属性和类属性
面向对象高级编程
使用__slots__
使用@property
多重继承
定制类
使用枚举类
使用元类
错误、调试和测试
错误处理
调试
单元测试
文档测试
IO编程
文件读写
StringIO和BytesIO
操作文件和目录
序列化
进程和线程
多进程
多线程
ThreadLocal
进程 vs. 线程
分布式进程
正则表达式
常用内建模块
datetime
collections
base64
struct
hashlib
itertools
contextlib
XML
HTMLParser
urllib
常用第三方模块
PIL
virtualenv
图形界面
网络编程
TCP/IP简介
TCP编程
UDP编程
电子邮件
SMTP发送邮件
POP3收取邮件
访问数据库
使用SQLite
使用MySQL
使用SQLAlchemy
Web开发
HTTP协议简介
HTML简介
WSGI接口
使用Web框架
使用模板
异步IO
协程
asyncio
async/await
aiohttp
实战
Day 1 - 搭建开发环境
Day 2 - 编写Web App骨架
Day 3 - 编写ORM
Day 4 - 编写Model
Day 5 - 编写Web框架
Day 6 - 编写配置文件
Day 7 - 编写MVC
Day 8 - 构建前端
Day 9 - 编写API
Day 10 - 用户注册和登录
Day 11 - 编写日志创建页
Day 12 - 编写日志列表页
Day 13 - 提升开发效率
Day 14 - 完成Web App
Day 15 - 部署Web App
Day 16 - 编写移动App
FAQ
期末总结
关于作者


匿名函数

阅读: 209927
当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。

在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算f(x)=x2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：

>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
[1, 4, 9, 16, 25, 36, 49, 64, 81]
通过对比可以看出，匿名函数lambda x: x * x实际上就是：

def f(x):
    return x * x
关键字lambda表示匿名函数，冒号前面的x表示函数参数。

匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。

用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：

>>> f = lambda x: x * x
>>> f
<function <lambda> at 0x101c6ef28>
>>> f(5)
25
同样，也可以把匿名函数作为返回值返回，比如：

def build(x, y):
    return lambda: x * x + y * y
小结

Python对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。

感觉本站内容不错，读后有收获？

 我要小额赞助，鼓励作者写出更好的教程

还可以分享给朋友



 返回函数装饰器
评论

发表评论

 Sign In to Make a Comment

2.7旧版教程
廖雪峰的官方网站©2015
Powered by iTranswarp.js
由阿里云托管
广告合作

Feedback
License
友情链接: 中华诗词 - 阿里云 - SICP - 4clojure

